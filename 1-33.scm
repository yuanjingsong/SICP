(define (filtered-accumulate combine null-value term a next b valid?)
  (if (> a b) null-value
        (let ((rest-terms (filtered-accumulate combine null-value term (next a) next b valid? )))
          (cond ((valid? a) 
                 (combine (term a) rest-terms)
                 )
                (else rest-terms)
                )
          )
      )
  )
(define (filtered-accumulate-iter combine null-value term a next b valid?)
  (define (iter i result)
    (cond ((> i b) result)
          ( (valid? i) (iter (next i) (combine (term i) result)))
          ( else (iter (next i) result))
          )
    )
  (iter a null-value)
  )
(define (prime? a)
  (define (iter a b)
    (cond 
        ( (= a 1) #f)
        ( ( or (< b (/ a 2)) (= b (/ a 2)) )
            (if (check a b) 
                (iter a (+ b 1))
                #f
                )
           )
          (else #t)
          )
    )
  (define (check a b)
    (if (= (remainder a b) 0) #f
        #t
        )
    )
    (iter a 2)
  )
(define (sum a b)
  (filtered-accumulate + 0 (lambda (x) x) a (lambda (x) (+ x 1)) b prime?  )
  )

(define (coprime? i n)
    (if (< i n) (= 1 (gcd i n))
        (= 1 (gcd n i))
        )
    )

(define (coprime-multi n)
  (filtered-accumulate * 1 (lambda (x) x) 2 (lambda (x) (+ x 1)) n (lambda (x) (coprime? x n)))
  )
