(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))
   )
  )
(define (union-set set1 set2)
  (define (iter input result)
    (if (null? input) (reverse result)
        (let ((current-element (car input))
              (remain-element (cdr input))
              )
          (if (element-of-set? current-element result)
                (iter remain-element result)
                (iter remain-element (cons current-element result))
              )
          )
        )
    )
  (iter (append set1 set2 ) '())
  )
