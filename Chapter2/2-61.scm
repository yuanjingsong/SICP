;require an ordered list
(define (adjoin-set x set)
  (if (null? set)
      (list x)
      (let ( (current-element (car set))
             (remain-elemnet (cdr set))
            )
        (cond ( (= x current-element) set)
              ( (> x current-element) (cons current-element (adjoin-set x remain-elemnet)))
              ( (< x current-element) (cons x set))
          )
        )
      )
  )
