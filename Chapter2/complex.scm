; rectangular form
(define square (lambda (x) (* x x)))
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))
(define (magnitude-rectangular z)
  (sqrt (+ (square (real-part-rectangular z))
           (square (imag-part-rectangular z))
           ))
  )
(define (angle-rectangular z)
  (atan (imag-part-rectangular z) (real-part-rectangular z))
  )
(define (make-from-real-imag-rectangualr x y) 
  (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a) ( attach-tag 'rectangular cons (* r (cos a)) (* r (sin a))))
(define (attach-tag type-tag contents)
  (cons type-tag contents)
  )
(define (real-part-polar z)
  (* (magnitude-polar z) (cos (angle-polar z)))
  )
(define (imag-part-polar z)
  (* (magnitude-polar z) (sin (angle-polar z)))
  )

(define (magnitude-polar z)
  (car z)
  )
(define (angle-polar z)
  (cdr z)
  )
(define (make-from-real-imag-polar x y)
  (attach-tag 'polar (cons (sqrt (+ (square x) (square y))) (atan y x)) 
  )
)
(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a))
  )
(define (type-tag datum)
  (if (pair? datum)
       (car datum)
       (error "BAD TAGGED")
   )
  )
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "BAD TAGGED CONTENT")
    )
  )
(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))
(define (polar? z)
  (eq? (type-tag z) 'polar)
  )
(define (real-part z)
  (cond ((rectangular? z) (real-part-rectangular (contents z)))
        ((polar? z) (real-part-polar (contents z)))
        (else "ERROR")
    )
  )
(define (imag-part z)
  (cond ((rectangular? z) (imag-part-rectangular (contents z)))
        ((polar? z) (imag-part-polar (contents z)))
        (else "ERROR")
    )
  )
(define (magnitude z)
  (cond ((rectangular? z) (magnitude-rectangular (contents z)))
        ((polar? z) (magnitude-polar (contents z)))
        (else "ERROR")
    )
  )
(define (angle z)
  (cond ((rectangular? z) (angle-rectangular (contents z)))
        ((polar? z) (angle-polar (contents z)))
        (else "ERROR")
    )
  )
(define (make-from-real-imag x y)
  (make-from-real-imag-rectangualr x y)
  )
(define (make-from-mag-ang r a)
  (make-from-mag-ang-polar r a)
  )
(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-part z1) (real-part z2))
                       (+ (imag-part z1) (imag-part z2))
                       )
  )
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error "NO METHOD" (list op type-tags))
        )
      )
    )
  )
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (make-from-real-imag x y)
  (lambda (op) 
    (cond ((eq? op 'real-part ) x)
          ((eq? op 'imag-part ) y)
          ((eq? op 'magnitude ) (sqrt (+ (square x) (square y))))
          ((eq? op 'angle ) (atan y x))
          (else "ERROR")
      )
    )
  )
(define (apply-generic op args) (args op))
