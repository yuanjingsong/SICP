(load "util.scm")
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter (lambda (positions) (safe? k positions))
                (flatmap
                  (lambda (rest-of-queens)
                    (map (lambda (new-row)
                           (adjoin-position new-row k rest-of-queens))
                         (enumerate-interval 1 board-size)
                         )
                    )
                (queen-cols (- k 1)))
            )
        )
    )
  (queen-cols board-size)
  )
(define (adjoin-position new-row k rest-of-queens)
  (cons new-row rest-of-queens)
  )
(define empty-board '())
(define (safe? k position) 
  (define (iter-check row rest-of-queens i)
    (if (null? rest-of-queens)
        #t
        (let ((row-of-current-queen (car rest-of-queens)))
          (if (or (= row row-of-current-queen)
                  (= row (+ i row-of-current-queen))
                  (= row (- row-of-current-queen i))
                  )
              #f
              (iter-check row (cdr rest-of-queens) (+ i 1))
              )
          )
      )
    )
    (iter-check (car position)
                (cdr position)
                1)
  )
