(load "2-63.scm")
(load "2-64.scm")
(define (elements-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (elements-of-set? x (cdr set)))
    )
  )
(define (intersection set1 set2)
  (cond ((or (null? set1) (null? set2))  ('()))
        ((elements-of-set? (car set1) set2)
            (cons (car set1) (intersection (cdr set1) set2))
         )
        (else (intersection (cdr set1) set2))
    )
  )
(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2))  '() )
        ((null? set1) set2)
        ((null? set2) set1)
        (else (let ((x (car set1)) (y (car set2)))
                (cond ((= x y) (cons x (union-set (cdr set1) (cdr set2))))
                      ((< x y) (cons x (union-set (cdr set1) set2)))
                      ((> x y) (cons y (union-set set1 (cdr set2))))
                  )
                )
          )
    )
  )


(define (intersection-tree tree1 tree2)
  (list->tree (intersection (tree->list-2 tree1) (tree->list-2 tree2)))
)
(define (union-tree tree1 tree2)
  (list->tree (union-set (tree->list-2 tree1) (tree->list-2 tree2)))
  )
