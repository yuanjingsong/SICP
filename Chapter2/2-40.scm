(load "util.scm")
(define (unique-pair n)
  (flatmap (lambda (i) (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n))
  )
(define (prime-sum? x)
  (prime? (+ (car x) (cadr x)))
  )
(define (prime? x)
  (define (iter a)
    (if (<= a (/ x 2))
        (begin(
               if ( = (remainder x a) 0)
               #f
               (iter (+ a 1))
               ))
        #t))
  (iter 2))
(define (make-pair-sum pair)
  (list (car pair) (cadr pair) (+ (car pair) (cadr pair)))
  )
(define (prime-sum-pairs n) 
  (map make-pair-sum 
       (filter prime-sum? (unique-pair n))
       )
  )
