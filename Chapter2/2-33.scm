(define (accumulate op initial sequence)
  (if (null? sequence)
        initial
        (op (car sequence) (accumulate op initial (cdr sequence)))
      )
  )
(define (filter predicate sequence)
  (cond ( (null? sequence) '())
        ((predicate sequence) (cons (car sequence) (filter predicate (cdr sequence))) )
        (else (filter predicate (cdr sequence)))
    )
  )
(define (enumerate-interval low high)
  (if (> low high) '()
      (cons low (enumerate-interval (+ low 1) high))
      )
  )
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) '() sequence )
  )
(define (append seq1 seq2)
  (accumulate cons seq1 seq2)
  )
(define (length sequence)
  (accumulate (lambda (x y) ( + 1 y) )    0 sequence)
  )
