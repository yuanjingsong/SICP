(define (exp base n)
  (define (even? x)
    (= (remainder x 2) 0)
    )
  (cond 
        ((= n 0) 1)
        ((= n 1) base)
        ((even? n) (square (exp base (/ n 2))) )
        (else (* base (exp base (- n 1))))
    )
  )
(define (square x) (* x x))
(load "1-43.scm")
(define (average-damp f)
  (define (average a b) (/ (+ a b) 2))
  (lambda (x) (average x (f x)))
  )
(define (average-damp-n-times f n)
  ((repeated average-damp n) f)
  )
(load "fixed-point.scm")
(define (damped-nth-root n damp-times)
  (lambda (x)
    (fixed-point (average-damp-n-times (lambda (y) (/ x (exp y (- n 1))) )damp-times ) 1.0) 
    )
  )
